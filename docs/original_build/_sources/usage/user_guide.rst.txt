How to use pyrecodes?
=====================

To run a **pyrecodes** model, the user needs to define three files:

- **component library**: input file defining the blueprints for system's components.
- **system configuration file**: input file defining the spatial and temporal discretization of the system, component locations, considered resources and resilience calculators.
- **main**: input file defining the classes and path to files of the **component library** and the **system**.

.. hint::

    Variables in square brackets need to be replaced with appropriate class names or values. Please check out the `Documentation <./documentation.html>`_ page for the available classes and their parameter format and the `Examples <examples.html>`_ page to see how they are implemented.

Component library
-----------------

Component library is a JSON file containing component parameters in the following format:

.. code-block:: json

    {
        "[ComponentName]": {
            "ComponentClass": "[ComponentClassName]",
            "RecoveryModel": {
                "Type": "[ComponentRecoveryModelClassName]",
                "Parameters": "[ComponentRecoveryModelClassParameters]",
                "DamageFunctionalityRelation": {
                    "Type": "[RelationClassName]"
                }
            },
            "Supply": {
                "[ResourceName]": {
                    "Amount": "[Amount]",
                    "FunctionalityToAmountRelation": "[RelationClassName]",
                    "UnmetDemandToAmountRelation": "[RelationClassName]"
                }
            },
            "OperationDemand": {
                "[ResourceName]": {
                    "Amount": "[Amount]",
                    "FunctionalityToAmountRelation": "[RelationClassName]"
                }
            }
        }
    }

System configuration
--------------------

System configuration is a JSON file structured as follows:

.. code-block:: json

    {
        "Constants": {
            "START_TIME_STEP": "[Value]",
            "MAX_TIME_STEP": "[Value]",
            "DISASTER_TIME_STEP": "[Value]",
            "[SystemClassSpecificParameters]": ""
        },
        "Content": {
            "[LocalityName]": "[LocalityCoordinatesAndContent]",
        },
        "DamageInput": {
            "Type": "[DamageInputClassName]",
            "Parameters": "[DamageInputClassParameters]"
        },
        "Resources": {
            "[ResourceName]": {
                "Group": "[ResourceGroupName]",
                "DistributionModel": {
                    "Type": "[ResourceDistributionModelClassName]",
                    "Parameters": {
                        "DistributionPriority": {
                            "Type": "[DistributionPriorityClassName]",
                            "Parameters": "[DistributionPriorityClassParameters]"
                        },
                        "TransferService": "[TransferServiceRequiredToTransferResource]"
                    }
                }
            },
        },
        "ResilienceCalculator": [
            {
                "Type": "[ResilienceCalculatorClassName]",
                "Parameters": "[ResilienceCalculatorClassParameters]"
            }
        ]
    }

Main
----

Main file is a JSON file specifying the class of the **pyrecodes** system and component library:

.. code-block:: json

    {
        "ComponentLibrary": {
            "ComponentLibraryCreatorClass": "[ComponentLibraryCreatorClassName]",
            "ComponentLibraryFile": "[PathToComponentLibraryFile]"
        },
        "System": {
            "SystemCreatorClass": "[SystemCreatorClassName]",
            "SystemClass": "[SystemClassName]",
            "SystemConfigurationFile": "[PathToSystemConfigurationFile]"
        }
    }

How to run the model
--------------------

Once the three files are defined, the model can be run using the following command:

.. code-block:: Python

    import pyrecodes
    system = pyrecodes.main.run('./path/to/main/file')

When the simulation is finished, user can save the system object containg the simulation outputs:

.. code-block:: Python

    system.save_as_pickle('savename')

The outputs can be loaded later as follows: 

.. code-block:: Python

    system = pyrecodes.main.load_system('savename')

Output visualization
--------------------

The results can be vizualised using the `Plotter <./documentation/plotter_class_docs.html>`_ and `GeoVisualisator <./documentation/geovisulisator_class_docs.html>`_ class. Note that the available visulization tools depend on the employed System class. Please check out the `Examples <examples.html>`_.


